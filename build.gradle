buildscript {
    ext.kotlin_version = '1.2.20'
    ext.dokka_version = "0.9.15"
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // plugins for documenting of kotlin source code
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0"
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.4.0'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.5.1'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1'
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'nebula.ospackage'


group = 'com.greatdreams.kotlin'
version = '0.0.1'

sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url "http://jcenter.bintray.com/"}
    maven { url "http://dl.bintray.com/jetbrains/spek" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }

}

def spekVersion = '1.1.5'
def kluentVersion = '1.15'
def harmkrest = '1.4.0.0'
def winterbVersion = '0.5.0'
def slf4jVersion = '1.7.25'
def logbackVersion = "1.2.3"
def groovyVersion = "2.4.12"
def typesafeVersion = '1.3.2'
def jacksonYAMLVersion = '2.9.3'
def springVersion = '5.0.2.RELEASE'

def hikariCPVersion = '2.7.4'
def commonsDBCPVersion = '2.2.0'
def mysqlVersion = '6.0.6'
def postgresqlVersion = '42.1.4'
def anormVersion = '2.6.0'
def slickVersion = '3.2.1'

def mybatisVersion = '3.4.5'
def mybatisSpringVersion = '1.3.1'
def jedisVersion = '2.9.0'
def rabbitmqVersion = '5.1.1'
def httpclientVersion = '4.5.4'
def nettyVersion = '4.1.19.Final'
def tomcatVersion = '9.0.2'
def reactorVersion = '3.1.2.RELEASE'
def commonIOVersion = '2.6'
def commonTextVersion = '1.2'
def akkaVersion = '2.5.8'
def akkaHTTPVersion = '10.0.11'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile "com.typesafe:config:${typesafeVersion}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonYAMLVersion}"

    // dependencies related with spring framework
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-context-support:${springVersion}"
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-beans:${springVersion}"
    compile "org.springframework:spring-jdbc:${springVersion}"
    compile "org.springframework:spring-aop:${springVersion}"
    compile "org.springframework:spring-orm:${springVersion}"
    compile "org.springframework:spring-expression:${springVersion}"
    compile "org.springframework:spring-tx:${springVersion}"
    compile "org.springframework:spring-jms:${springVersion}"
    compile "org.springframework:spring-messaging:${springVersion}"
    compile "org.springframework:spring-aspects:${springVersion}"
    compile "org.springframework:spring-instrument:${springVersion}"
    testCompile "org.springframework:spring-test:${springVersion}"

    // database pool - hikariCP dependencies
    compile "com.zaxxer:HikariCP:${hikariCPVersion}"
    // database pool - commons-dhcp dependencies
    compile "org.apache.commons:commons-dbcp2:${commonsDBCPVersion}"
    // databases driver dependencies
    compile "mysql:mysql-connector-java:${mysqlVersion}"
    compile "org.postgresql:postgresql:${postgresqlVersion}"

    // Anorm is Not an Object Relational Mapper dependencies
    compile "org.playframework.anorm:anorm_2.12:${anormVersion}"
    compile "org.playframework.anorm:anorm-tokenizer_2.12:${anormVersion}"
    compile "org.playframework.anorm:anorm-akka_2.12:${anormVersion}"
    compile "org.playframework.anorm:anorm-postgres_2.12:${anormVersion}"
    compile "org.playframework.anorm:anorm-iteratee_2.12:${anormVersion}"

    //slick library dependencies
    compile "com.typesafe.slick:slick_2.12:${slickVersion}"
    compile "com.typesafe.slick:slick-hikaricp_2.12:${slickVersion}"
    testCompile "com.typesafe.slick:slick-testkit_2.12:${slickVersion}"
    compile "com.typesafe.slick:slick-codegen_2.12:${slickVersion}"



    // object relationship mapping dependencies
    compile "org.mybatis:mybatis:${mybatisVersion}"
    compile "org.mybatis:mybatis-spring:${mybatisSpringVersion}"

    // connection for messaging broker dependencies
    compile "redis.clients:jedis:${jedisVersion}"
    compile "com.rabbitmq:amqp-client:${rabbitmqVersion}"

    // httpclient dependencies
    compile "org.apache.httpcomponents:httpclient:${httpclientVersion}"

    // netty dependencies
    compile "io.netty:netty-all:${nettyVersion}"

    // tomcat embedded dependencies
    compile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"

    // reactor dependencies
    compile "io.projectreactor:reactor-core:${reactorVersion}"
    compile "io.projectreactor:reactor-test:${reactorVersion}"

    // apache common components dependencies
    compile "commons-io:commons-io:${commonIOVersion}"
    compile "org.apache.commons:commons-text:${commonTextVersion}"

    // akka library dependencies
    compile "com.typesafe.akka:akka-actor_2.12:${akkaVersion}"
    testCompile "com.typesafe.akka:akka-testkit_2.12:${akkaVersion}"
    compile "com.typesafe.akka:akka-stream_2.12:${akkaVersion}"
    testCompile "com.typesafe.akka:akka-stream-testkit_2.12:${akkaVersion}"
    compile "com.typesafe.akka:akka-stream_2.12:${akkaVersion}"
    compile "com.typesafe.akka:akka-cluster-sharding_2.12:${akkaVersion}"
    compile "com.typesafe.akka:akka-distributed-data_2.12:${akkaVersion}"
    compile "com.typesafe.akka:akka-persistence_2.12:${akkaVersion}"

    compile "com.typesafe.akka:akka-http_2.12:${akkaHTTPVersion}"
    testCompile "com.typesafe.akka:akka-http-testkit_2.12:${akkaHTTPVersion}"

    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "ch.qos.logback:logback-core:$logbackVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "ch.qos.logback:logback-access:$logbackVersion"
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    testCompile "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}"
    testCompile("org.jetbrains.spek:spek-api:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }

    testCompile ("org.jetbrains.spek:spek-junit-platform-engine:$spekVersion") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }

    testCompile 'org.junit.platform:junit-platform-console:1.0.1'
    testCompile "org.amshove.kluent:kluent:$kluentVersion"
    testCompile "com.natpryce:hamkrest:$harmkrest"
    testCompile "com.winterbe:expekt:${winterbVersion}"

}
// get mode with which the project will be built, run, test, and  distributed.
// mode has three possible value: dev for development(default value),
// tes for test and pro for production.

project.ext {
    mode1 = ""
    mode = ""

    username = project.hasProperty("username") ? project.username: "annonymous"
    password = project.hasProperty("password") ? project.password: "12345678"

    if (project.hasProperty("buildMode")) {
        mode1 =  project.buildMode.toLowerCase()

        if(mode1.contains("dev"))
            mode = "dev"
        else if(mode1.contains("test"))
            mode = "test"
        else if(mode1.contains("prod"))
            mode = "prod"
        else {
            println("mode has an invalid value, and will use a default value - dev")
            mode = "dev"
        }
    } else {
        mode = "dev"
    }
    logger.quiet("TIP current project building mode is " + mode)

}

// create a run task in development mode
task devRun(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.greatdreams.kotlin.template.MainClass"
    jvmArgs("-Dconfig.file=${project.projectDir}/conf-${project.ext.mode}/application.conf")
    jvmArgs("-Dlogback.configurationFile=${project.projectDir}/conf-${project.ext.mode}/logback.groovy")
    jvmArgs("-Xmx1024m")
}

defaultTasks 'devRun'

mainClassName = 'com.greatdreams.kotlin.template.MainClass'
applicationDefaultJvmArgs = [
        "-Duser.dir=MY_APP_HOME",
        "-Dconfig.file=MY_APP_HOME/conf/application.conf",
        "-Dlogback.configurationFile=MY_APP_HOME/conf/logback.groovy"]

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%~dp0..')

    }
}

distributions {
    main {
        baseName = "${project.name}-${mode}"
        contents {
            from(new File("conf-${project.ext.mode}")){
                into "conf"
            }
            from (new File("documentation")) {
                into "documentation"
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.5-rc-1"
}

junitPlatform {
    filters {
        engines { include 'spek' }
    }
}

test {
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}

// dokka configuration
dokka {
    moduleName = "data"
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    processConfigurations = ['compile']
    includes = []
    samples = []
    linkMapping {
        dir = 'src/main/kotlin'
        url = 'https://github.com/cy6erGn0m/vertx3-lang-kotlin/blob/master/src/main/kotlin'
        suffix = '#L'
    }
    sourceDirs = files('src/main/kotlin')
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'com.greatdreams.kotlin.template.MainClass'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// pom file name
ext {
    pomFilePath = "${project.projectDir}/tmp/pom.xml"
    pomFile = file(pomFilePath)
}

// javadoc.jar generation
task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
// sources.jar generation
task sourceJar (type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
// summarize artifacts
artifacts {
    archives jar
    archives sourceJar
    archives javadocJar

    if(pomFile.exists()) {
        pom pomFile
    }
}

publishing {
    publications {
        app(MavenPublication) {
            from components.java
            artifactId 'simiple-kotlin-application-template-with-gradle'
        }
    }
    repositories {
        maven {
            name 'localRepo'
            url "file://$projectDir/repo"
        }
        maven {
            name 'labRepo'
            credentials {
                username = "${username}"
                password = "${password}"
            }
            url "http://nexus.buptnsrc.com/content/repositories/thirdparty/"
        }
    }
}

task packageDeb(type: Deb) {
    packageName = 'com.greatdreams.java.getstarted'
    version = '0.0.1'
    release = 2

    configurationFile('/etc/defaults/myapp')
    installUtils file('scripts/deb/utils.sh')
    preInstall file('scripts/deb/preInstall.sh')
    postInstall file('scripts/deb/postInstall.sh')
    preUninstall file('scripts/deb/preUninstall.sh')
    postUninstall file('scripts/deb/postUninstall.sh')

    requires('bar', '2.2')
    requires('baz', '1.0.1')
    requires('qux')

    into '/opt/javaapp-getstarted'

    from(jar.outputs.files) {
        into 'lib'
    }
    from(configurations.runtime) {
        into 'lib'
    }
    from('lib') {
        into 'lib'
    }
    from('scripts') {
        into 'bin'
        exclude 'database'
        fileMode 0550
    }
    from('src/main/resources') {
        fileType CONFIG | NOREPLACE
        into 'conf'
    }
    from('home') {
        createDirectoryEntry = true
        fileMode 0500
        into 'home'
    }
    from('endorsed') {
        into '/usr/share/tomcat/endorsed'
    }

    link('/etc/init.d/foo', '/opt/foo/bin/foo.init')

    customField 'Build-Host', 'http://mycihost'
    customField([
            'Commit-ID': 'deadbeef',
            'Owner': 'John Doe <johndoe@sweetdomain.io>'
    ])
    customFields << [
            'Build-Job': 'FooProject'
    ]
}

task packageRpm(type: Rpm) {
    packageName 'com.greatdreams.java.getstarted'
    version '0.0.1'
    //
    // release 1
    arch I386
    os LINUX

    installUtils = file('scripts/rpm/utils.sh')
    preInstall file('scripts/rpm/preInstall.sh')
    postInstall file('scripts/rpm/postInstall.sh')
    preUninstall file('scripts/rpm/preUninstall.sh')
    postUninstall file('scripts/rpm/postUninstall.sh')
    preTrans file('scripts/rpm/preTrans.sh')
    postTrans file('scripts/rpm/postTrans.sh')

    requires('bar', '2.2', GREATER | EQUAL)
    requires('baz', '1.0.1', LESS)
    requires('qux')

    into '/opt/javaapp-getstarted'

    from(jar.outputs.files) {
        into 'lib'
    }
    from(configurations.runtime) {
        into 'lib'
    }
    from('lib') {
        into 'lib'
    }
    from('scripts') {
        into 'bin'
        exclude 'database'
        fileMode 0550
    }
    from('src/main/resources') {
        fileType CONFIG | NOREPLACE
        into 'conf'
    }
    from('home') {
        // Creating directory entries (or not) in the RPM is normally left up to redline-rpm library.
        // Use this to explicitly create an entry -- for setting directory fileMode on system directories.
        createDirectoryEntry = true
        fileMode 0500
        into 'home'
    }
    from('endorsed') {
        // Will tell redline-rpm not to auto create directories, which
        // is sometimes necessary to avoid rpm directory conflicts
        addParentDirs = false
        into '/usr/share/tomcat/endorsed'
    }

    link('/etc/init.d/foo', '/opt/foo/bin/foo.init')
}