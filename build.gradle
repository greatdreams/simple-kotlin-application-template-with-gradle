buildscript {
    ext.kotlinVersion = '1.2.30'
    ext.dokkaVersion = '0.9.16'
    ext.junitGradleVersion = '1.1.0'
    ext.ospackagePlugin = '4.7.5'
    ext.asciidoctorGradleVersion = '1.5.7'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        // plugins for documenting of kotlin source code
        classpath 'com.kncept.junit5.reporter:junit-reporter:1.0.2'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:${junitGradleVersion}"
        classpath "com.netflix.nebula:gradle-ospackage-plugin:${ospackagePlugin}"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorGradleVersion}"
        classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.8.1'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16'
    }
}

group = 'com.greatdreams.kotlin'
version = '0.0.1'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'scala'
apply plugin: 'groovy'

apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.kncept.junit5.reporter'
apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'nebula.ospackage'

// get mode with which the project will be built, run, test, and  distributed.
// mode has three possible value: dev for development(default value),
// tes for test and pro for production.

project.ext {
    mode1 = ""
    mode = ""

    username = project.hasProperty("username") ? project.username : "annonymous"
    password = project.hasProperty("password") ? project.password : "12345678"

    if (project.hasProperty("buildMode")) {
        mode1 = project.buildMode.toLowerCase()

        if (mode1.contains("dev"))
            mode = "dev"
        else if (mode1.contains("test"))
            mode = "test"
        else if (mode1.contains("prod"))
            mode = "prod"
        else {
            println("mode has an invalid value, and will use a default value - dev")
            mode = "dev"
        }
    } else {
        mode = "dev"
    }
    logger.quiet("tip current project building mode is " + mode)

}

// create a run task in development mode
task devRun(type: JavaExec) {
    classpath = project.sourceSets.main.runtimeClasspath
    main = "com.greatdreams.kotlin.template.MainClass"
    jvmArgs("-Dconfig.file=${project.projectDir}/conf-${project.ext.mode}/application.conf")
    jvmArgs("-Dlogback.configurationFile=${project.projectDir}/conf-${project.ext.mode}/logback.groovy")
    jvmArgs("-Xmx1024m")
}

defaultTasks 'devRun'

mainClassName = 'com.greatdreams.kotlin.template.MainClass'
applicationDefaultJvmArgs = [
        "-Duser.dir=MY_APP_HOME",
        "-Dconfig.file=MY_APP_HOME/conf/application.conf",
        "-Dlogback.configurationFile=MY_APP_HOME/conf/logback.groovy"]

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%~dp0..')

    }
}

distributions {
    main {
        baseName = "${project.name}-${mode}"
        contents {
            from(new File("conf-${project.ext.mode}")) {
                into "conf"
            }
            from(new File("documentation")) {
                into "documentation"
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.6"
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': name,
                'Implementation-Version': version,
                'Main-Class': 'com.greatdreams.kotlin.template.MainClass'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'scala'
    apply plugin: 'groovy'
    apply plugin: 'application'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'com.kncept.junit5.reporter'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    apply plugin: 'org.asciidoctor.convert'
    apply plugin: 'nebula.ospackage'

    sourceCompatibility = '1.8'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    kotlin {
        experimental {
            coroutines 'enable'
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }

    repositories {
        mavenCentral()
        maven { url "http://jcenter.bintray.com/" }
        maven { url "http://dl.bintray.com/jetbrains/spek" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }

    }

    def scalaVersion = '2.12.5'
    def scalaTestVersion = '3.0.4'
    def spekVersion = '1.1.5'
    def kluentVersion = '1.15'
    def harmkrest = '1.4.0.0'
    def winterbVersion = '0.5.0'
    def slf4jVersion = '1.7.25'
    def logbackVersion = "1.2.3"
    def groovyVersion = "2.4.12"
    def typesafeVersion = '1.3.3'
    def jacksonYAMLVersion = '2.9.4'
    def quartzVersion = "2.3.0"

    def hikariCPVersion = '2.7.4'
    def commonsDBCPVersion = '2.2.0'
    def mysqlVersion = '6.0.6'
    def postgresqlVersion = '42.1.4'
    def anormVersion = '2.6.0'
    def slickVersion = '3.2.1'

    def mybatisVersion = '3.4.5'
    def mybatisSpringVersion = '1.3.1'

    def lettuceVerion = '5.0.2.RELEASE'
    def jedisVersion = '2.9.0'
    def rabbitmqVersion = '5.1.1'
    def httpclientVersion = '4.5.5'
    def nettyVersion = '4.1.22.Final'
    def tomcatVersion = '9.0.5'
    def reactorVersion = '3.1.4.RELEASE'
    def commonIOVersion = '2.6'
    def commonTextVersion = '1.2'
    def akkaVersion = '2.5.10'
    def akkaHTTPVersion = '10.1.0-RC2'

    def junit4Version = '4.12'
    def junitVintageVersion = '4.12.0'
    def junitJupiterVersion = '5.1.0'

    dependencies {
        compile "org.scala-lang:scala-compiler:${scalaVersion}"
        compile "org.scala-lang:scala-library:${scalaVersion}"
        compile "org.scala-lang:scala-reflect:${scalaVersion}"
        // Declare the dependency for your favourite test framework you want to use in your tests.
        testCompile "org.scalatest:scalatest_2.12:${scalaTestVersion}"

        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

        compile "com.typesafe:config:${typesafeVersion}"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonYAMLVersion}"


        compile "org.quartz-scheduler:quartz:${quartzVersion}"
        compile "org.quartz-scheduler:quartz-jobs:${quartzVersion}"

        // database pool - hikariCP dependencies
        compile "com.zaxxer:HikariCP:${hikariCPVersion}"
        // database pool - commons-dhcp dependencies
        compile "org.apache.commons:commons-dbcp2:${commonsDBCPVersion}"
        // databases driver dependencies
        compile "mysql:mysql-connector-java:${mysqlVersion}"
        compile "org.postgresql:postgresql:${postgresqlVersion}"

        // Anorm is Not an Object Relational Mapper dependencies
        compile "org.playframework.anorm:anorm_2.12:${anormVersion}"
        compile "org.playframework.anorm:anorm-tokenizer_2.12:${anormVersion}"
        compile "org.playframework.anorm:anorm-akka_2.12:${anormVersion}"
        compile "org.playframework.anorm:anorm-postgres_2.12:${anormVersion}"
        compile "org.playframework.anorm:anorm-iteratee_2.12:${anormVersion}"

        //slick library dependencies
        compile "com.typesafe.slick:slick_2.12:${slickVersion}"
        compile "com.typesafe.slick:slick-hikaricp_2.12:${slickVersion}"
        testCompile "com.typesafe.slick:slick-testkit_2.12:${slickVersion}"
        compile "com.typesafe.slick:slick-codegen_2.12:${slickVersion}"

        // object relationship mapping dependencies
        compile "org.mybatis:mybatis:${mybatisVersion}"
        compile "org.mybatis:mybatis-spring:${mybatisSpringVersion}"

        // connection for messaging broker dependencies
        compile "redis.clients:jedis:${jedisVersion}"
        compile "com.rabbitmq:amqp-client:${rabbitmqVersion}"
        compile "io.lettuce:lettuce-core:${lettuceVerion}"

        // httpclient dependencies
        compile "org.apache.httpcomponents:httpclient:${httpclientVersion}"

        // netty dependencies
        compile "io.netty:netty-all:${nettyVersion}"

        // tomcat embedded dependencies
        compile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"

        // reactor dependencies
        compile "io.projectreactor:reactor-core:${reactorVersion}"
        compile "io.projectreactor:reactor-test:${reactorVersion}"

        // apache common components dependencies
        compile "commons-io:commons-io:${commonIOVersion}"
        compile "org.apache.commons:commons-text:${commonTextVersion}"

        // akka library dependencies
        compile "com.typesafe.akka:akka-actor_2.12:${akkaVersion}"
        testCompile "com.typesafe.akka:akka-testkit_2.12:${akkaVersion}"
        compile "com.typesafe.akka:akka-stream_2.12:${akkaVersion}"
        testCompile "com.typesafe.akka:akka-stream-testkit_2.12:${akkaVersion}"
        compile "com.typesafe.akka:akka-stream_2.12:${akkaVersion}"
        compile "com.typesafe.akka:akka-cluster-sharding_2.12:${akkaVersion}"
        compile "com.typesafe.akka:akka-distributed-data_2.12:${akkaVersion}"
        compile "com.typesafe.akka:akka-persistence_2.12:${akkaVersion}"

        compile "com.typesafe.akka:akka-http_2.12:${akkaHTTPVersion}"
        testCompile "com.typesafe.akka:akka-http-testkit_2.12:${akkaHTTPVersion}"

        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "org.slf4j:jul-to-slf4j:${slf4jVersion}"
        compile "ch.qos.logback:logback-core:$logbackVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"
        compile "ch.qos.logback:logback-access:$logbackVersion"
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"

        testCompile "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}"
        testCompile("org.jetbrains.spek:spek-api:$spekVersion") {
            exclude group: 'org.jetbrains.kotlin'
        }

        testCompile("org.jetbrains.spek:spek-junit-platform-engine:$spekVersion") {
            exclude group: 'org.junit.platform'
            exclude group: 'org.jetbrains.kotlin'
        }

        testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
        testCompile "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
        testCompile "org.junit.jupiter:junit-jupiter-migrationsupport:${junitJupiterVersion}"


        testCompile "junit:junit:${junit4Version}"
        testCompile "org.junit.vintage:junit-vintage-engine:${junitVintageVersion}"

        testCompile 'org.junit.platform:junit-platform-console:1.0.3'

        testCompile "org.amshove.kluent:kluent:$kluentVersion"
        testCompile "com.natpryce:hamkrest:$harmkrest"
        testCompile "com.winterbe:expekt:${winterbVersion}"
    }

    junitPlatformTest.finalizedBy 'junitHtmlReport'

    junitPlatform {
        filters {
            engines {
                include 'spek', 'junit-jupiter', 'junit-vintage'
            }

            /*
            tags {}
            packages {
                include '', ''
            }
            */

            /*
            includeClassNamePattern '.*Spec'
            includeClassNamePatterns '.*Test', '.*Tests'
            */

            includeClassNamePattern '.*Tests'
        }

        junitHtmlReport {
            // If true, then instead of producing multiple reports per test folder (test run),
            // aggregate them all together into the test-reports root directory.
            // Also use this if all your test results end up directly in the test-results directory
            aggregated = false

            //RAG status css overrides
            cssRed = 'red'
            cssAmber = 'orange'
            cssGreen = 'green'

            //Processing directories
            testResultsDir = 'test-results'
            testReportsDir = 'reports/tests'

            //Fail build when no XML files to process
            failOnEmpty = true
        }

        logManager 'java.util.logging.LogManager'
        reportsDir file('build/test-results/junit-platform')

        /*
        selectors {
            uris 'file:///foo.txt', 'http://example.com/'
            uri 'foo:resource'
            files 'foo.txt', 'bar.csv'
            file 'qux.json'
            directories 'foo/bar', 'bar/qux'
            directory 'qux/bar'
            packages 'com.acme.foo', 'com.acme.bar'
            aPackage 'com.example.app'
            classes 'com.acme.Foo', 'com.acme.Bar'
            aClass 'com.example.app.Application'
            methods 'com.acme.Foo#a', 'com.acme.Foo#b'
            method 'com.example.app.Application#run(java.lang.String[])'
            resources '/bar.csv', '/foo/input.json'
            resource '/com/acme/my.properties'
        }
        */

        configurationParameter 'junit.jupiter.conditions.deactivate', '*'
        configurationParameters([
                'junit.jupiter.extensions.autodetection.enabled': 'true',
                'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
        ])
    }

    test {
        reports {
            junitXml.enabled = false
            html.enabled = true
        }
    }

    // dokka configuration
    dokka {
        moduleName = "data"
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
        processConfigurations = ['compile']
        includes = []
        samples = []

        linkMapping {
            dir = 'src/main/kotlin'
            url = 'https://github.com/cy6erGn0m/vertx3-lang-kotlin/blob/master/src/main/kotlin'
            suffix = '#L'
        }
        sourceDirs = files('src/main/kotlin')
    }

    // pom file name
    ext {
        pomFilePath = "${project.projectDir}/tmp/pom.xml"
        pomFile = file(pomFilePath)
    }

    // javadoc.jar generation
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // sources.jar generation
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // summarize artifacts
    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar

        if (pomFile.exists()) {
            pom pomFile
        }
    }

    publishing {

        publications {
            app(MavenPublication) {
                from components.java
                artifactId project.name

                artifact sourceJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }

        repositories {

            maven {
                name 'localRepo'
                url "file://${project.buildDir}/repo"
            }

            maven {
                name 'labRepo'

                credentials {
                    username = "${username}"
                    password = "${password}"
                }

                url "http://nexus.buptnsrc.com/content/repositories/thirdparty/"
            }
        }
    }

    task packageDeb(type: Deb) {
        packageName = 'com.greatdreams.kotlin.template'
        version = '0.0.1'
        release = 2

        configurationFile('/etc/defaults/myapp')
        installUtils file('scripts/deb/utils.sh')
        preInstall file('scripts/deb/preInstall.sh')
        postInstall file('scripts/deb/postInstall.sh')
        preUninstall file('scripts/deb/preUninstall.sh')
        postUninstall file('scripts/deb/postUninstall.sh')

        requires('bar', '2.2')
        requires('baz', '1.0.1')
        requires('qux')

        into "/opt/${project.name}"

        from(jar.outputs.files) {
            into 'lib'
        }
        from(configurations.runtime) {
            into 'lib'
        }
        from('lib') {
            into 'lib'
        }
        from('scripts') {
            into 'bin'
            exclude 'database'
            fileMode 0550
        }
        from('src/main/resources') {
            fileType CONFIG | NOREPLACE
            into 'conf'
        }
        from('home') {
            createDirectoryEntry = true
            fileMode 0500
            into 'home'
        }
        from('endorsed') {
            into '/usr/share/tomcat/endorsed'
        }

        link('/etc/init.d/foo', '/opt/foo/bin/foo.init')

        customField 'Build-Host', 'http://mycihost'
        customField([
                'Commit-ID': 'deadbeef',
                'Owner'    : 'John Doe <johndoe@sweetdomain.io>'
        ])
        customFields << [
                'Build-Job': 'FooProject'
        ]
    }

    task packageRpm(type: Rpm) {
        packageName 'com.greatdreams.java.getstarted'
        version '0.0.1'
        //
        // release 1
        arch I386
        os LINUX

        installUtils = file('scripts/rpm/utils.sh')
        preInstall file('scripts/rpm/preInstall.sh')
        postInstall file('scripts/rpm/postInstall.sh')
        preUninstall file('scripts/rpm/preUninstall.sh')
        postUninstall file('scripts/rpm/postUninstall.sh')
        preTrans file('scripts/rpm/preTrans.sh')
        postTrans file('scripts/rpm/postTrans.sh')

        requires('bar', '2.2', GREATER | EQUAL)
        requires('baz', '1.0.1', LESS)
        requires('qux')

        into "/opt/${project.name}"

        from(jar.outputs.files) {
            into 'lib'
        }
        from(configurations.runtime) {
            into 'lib'
        }
        from('lib') {
            into 'lib'
        }
        from('scripts') {
            into 'bin'
            exclude 'database'
            fileMode 0550
        }
        from('src/main/resources') {
            fileType CONFIG | NOREPLACE
            into 'conf'
        }
        from('home') {
            // Creating directory entries (or not) in the RPM is normally left up to redline-rpm library.
            // Use this to explicitly create an entry -- for setting directory fileMode on system directories.
            createDirectoryEntry = true
            fileMode 0500
            into 'home'
        }
        from('endorsed') {
            // Will tell redline-rpm not to auto create directories, which
            // is sometimes necessary to avoid rpm directory conflicts
            addParentDirs = false
            into '/usr/share/tomcat/endorsed'
        }

        link('/etc/init.d/foo', '/opt/foo/bin/foo.init')
    }
}

subprojects {
    group = 'com.greatdreams.kotlin.example'
}

project(':rxkotlin-example') {
}

project(':functional-example') {
}

project(':kotlin-example') {
    version = '0.0.1'
}
project(':learn-kotlin') {
    version = '0.0.1'
}

project(':java-example') {
    version = '0.0.1'
}
project(':learn-java') {
    version = '0.0.1'
}

project(':learn-spring-example') {
    version = '0.0.1'
}
project(':learn-spring') {
    version = '0.0.1'
}

project(':learn-pcap4j') {
    version = '0.0.1'
}

project(':learn-template') {
    version = '0.0.1'
}
